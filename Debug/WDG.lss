
WDG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800102  00800102  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f14  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac5  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f6  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a8  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  9e:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_Init>:
  a6:	25 9a       	sbi	0x04, 5	; 4
  a8:	08 95       	ret

000000aa <GPIO_Write>:
  aa:	66 23       	and	r22, r22
  ac:	69 f0       	breq	.+26     	; 0xc8 <GPIO_Write+0x1e>
  ae:	45 b1       	in	r20, 0x05	; 5
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	b9 01       	movw	r22, r18
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_Write+0x12>
  b8:	66 0f       	add	r22, r22
  ba:	77 1f       	adc	r23, r23
  bc:	8a 95       	dec	r24
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_Write+0xe>
  c0:	cb 01       	movw	r24, r22
  c2:	84 2b       	or	r24, r20
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret
  c8:	45 b1       	in	r20, 0x05	; 5
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_Write+0x2c>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	8a 95       	dec	r24
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_Write+0x28>
  da:	cb 01       	movw	r24, r22
  dc:	80 95       	com	r24
  de:	84 23       	and	r24, r20
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	08 95       	ret

000000e4 <GPIO_Init_test>:
  e4:	94 b1       	in	r25, 0x04	; 4
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_Init_test+0xc>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_Init_test+0x8>
  f4:	29 2b       	or	r18, r25
  f6:	24 b9       	out	0x04, r18	; 4
  f8:	08 95       	ret

000000fa <LEDM_Init>:
 * This function initializes the GPIO module and sets the initial state of the LED.
 * It also records the initial time for toggling the LED.
 */
void LEDM_Init(void)
{
	GPIO_Init();
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_Init>
	GPIO_Write(LED_PIN, ledState);
  fe:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
	lastToggleTime = GetMillis();
 108:	0e 94 96 01 	call	0x32c	; 0x32c <GetMillis>
 10c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
 110:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
 114:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
 118:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x3>
 11c:	08 95       	ret

0000011e <LEDM_Manage>:
 * @brief Manages the LED toggling and watchdog aliveness indication.
 * This function checks the elapsed time and toggles the LED state every 500ms.
 * It also signals the watchdog manager to indicate that the system is alive.
 */
void LEDM_Manage(void)
{
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
	GPIO_Init_test(LED_PIN_2);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Init_test>
	GPIO_Write(LED_PIN_2, 1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
		
	uint32_t currentTime = GetMillis();
 134:	0e 94 96 01 	call	0x32c	; 0x32c <GetMillis>
 138:	6b 01       	movw	r12, r22
 13a:	7c 01       	movw	r14, r24
	if (currentTime - lastToggleTime >= 500) {
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 140:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 144:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 148:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 14c:	a7 01       	movw	r20, r14
 14e:	96 01       	movw	r18, r12
 150:	28 1b       	sub	r18, r24
 152:	39 0b       	sbc	r19, r25
 154:	4a 0b       	sbc	r20, r26
 156:	5b 0b       	sbc	r21, r27
 158:	da 01       	movw	r26, r20
 15a:	c9 01       	movw	r24, r18
 15c:	84 3f       	cpi	r24, 0xF4	; 244
 15e:	91 40       	sbci	r25, 0x01	; 1
 160:	a1 05       	cpc	r26, r1
 162:	b1 05       	cpc	r27, r1
 164:	90 f0       	brcs	.+36     	; 0x18a <LEDM_Manage+0x6c>
		ledState = ledState ?0: 1;
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	81 11       	cpse	r24, r1
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
		GPIO_Write(LED_PIN, ledState);
 174:	85 e0       	ldi	r24, 0x05	; 5
 176:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
		lastToggleTime = currentTime;
 17a:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <__data_end>
 17e:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <__data_end+0x1>
 182:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <__data_end+0x2>
 186:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <__data_end+0x3>
	}
	WDGM_AlivenessIndication();
 18a:	0e 94 40 02 	call	0x480	; 0x480 <WDGM_AlivenessIndication>
	
	GPIO_Write(LED_PIN_2, 0);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
}
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	08 95       	ret

000001a0 <main>:
static volatile uint32_t g_lastCheckTimeMain = 0;
static volatile uint32_t g_lastCheckTimeDrv = 0;

int main()
{
   GPIO_Init_test(LED_PIN_0);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Init_test>
GPIO_Write(LED_PIN_0, 1);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
    LEDM_Init();
 1ae:	0e 94 7d 00 	call	0xfa	; 0xfa <LEDM_Init>
    Timer1_Init();
 1b2:	0e 94 24 01 	call	0x248	; 0x248 <Timer1_Init>
    Timer2_Init();
 1b6:	0e 94 39 01 	call	0x272	; 0x272 <Timer2_Init>
    WDGDrv_Init();
 1ba:	0e 94 a1 01 	call	0x342	; 0x342 <WDGDrv_Init>
    WDGM_Init();
 1be:	0e 94 c4 01 	call	0x388	; 0x388 <WDGM_Init>
	
	

    while (1)
    {
        uint32_t currentTimeMain = GetMillis();
 1c2:	0e 94 96 01 	call	0x32c	; 0x32c <GetMillis>
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
        if (currentTimeMain - g_lastCheckTimeMain >= 10)
 1ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <g_lastCheckTimeMain>
 1ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <g_lastCheckTimeMain+0x1>
 1d2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <g_lastCheckTimeMain+0x2>
 1d6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <g_lastCheckTimeMain+0x3>
 1da:	a7 01       	movw	r20, r14
 1dc:	96 01       	movw	r18, r12
 1de:	28 1b       	sub	r18, r24
 1e0:	39 0b       	sbc	r19, r25
 1e2:	4a 0b       	sbc	r20, r26
 1e4:	5b 0b       	sbc	r21, r27
 1e6:	2a 30       	cpi	r18, 0x0A	; 10
 1e8:	31 05       	cpc	r19, r1
 1ea:	41 05       	cpc	r20, r1
 1ec:	51 05       	cpc	r21, r1
 1ee:	50 f0       	brcs	.+20     	; 0x204 <main+0x64>
        {
            LEDM_Manage();
 1f0:	0e 94 8f 00 	call	0x11e	; 0x11e <LEDM_Manage>
            g_lastCheckTimeMain = currentTimeMain;
 1f4:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <g_lastCheckTimeMain>
 1f8:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <g_lastCheckTimeMain+0x1>
 1fc:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <g_lastCheckTimeMain+0x2>
 200:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <g_lastCheckTimeMain+0x3>
        }

        uint32_t currentTimeDrv = GetMillis();
 204:	0e 94 96 01 	call	0x32c	; 0x32c <GetMillis>
 208:	6b 01       	movw	r12, r22
 20a:	7c 01       	movw	r14, r24
        if (currentTimeDrv - g_lastCheckTimeDrv >= 20)
 20c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_lastCheckTimeDrv>
 210:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_lastCheckTimeDrv+0x1>
 214:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <g_lastCheckTimeDrv+0x2>
 218:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <g_lastCheckTimeDrv+0x3>
 21c:	a7 01       	movw	r20, r14
 21e:	96 01       	movw	r18, r12
 220:	28 1b       	sub	r18, r24
 222:	39 0b       	sbc	r19, r25
 224:	4a 0b       	sbc	r20, r26
 226:	5b 0b       	sbc	r21, r27
 228:	24 31       	cpi	r18, 0x14	; 20
 22a:	31 05       	cpc	r19, r1
 22c:	41 05       	cpc	r20, r1
 22e:	51 05       	cpc	r21, r1
 230:	40 f2       	brcs	.-112    	; 0x1c2 <main+0x22>
        {
            WDGM_MainFunction();
 232:	0e 94 d7 01 	call	0x3ae	; 0x3ae <WDGM_MainFunction>
            g_lastCheckTimeDrv = currentTimeDrv;
 236:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <g_lastCheckTimeDrv>
 23a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <g_lastCheckTimeDrv+0x1>
 23e:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <g_lastCheckTimeDrv+0x2>
 242:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <g_lastCheckTimeDrv+0x3>
 246:	bd cf       	rjmp	.-134    	; 0x1c2 <main+0x22>

00000248 <Timer1_Init>:
 * enables the Timer1 compare interrupt, sets the prescaler, and enables global interrupts.
 */
void Timer1_Init()
{
    // Set Timer1 to CTC (Clear Timer on Compare Match) mode
    TCCR1B |= (1 << WGM12);
 248:	e1 e8       	ldi	r30, 0x81	; 129
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	80 83       	st	Z, r24

    // Set the compare match register to value for 51 ms interrupt at 1 MHz
    OCR1A = 815; // 51*16 - 1 = 816 -1 = 815
 252:	8f e2       	ldi	r24, 0x2F	; 47
 254:	93 e0       	ldi	r25, 0x03	; 3
 256:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 25a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

    // Enable Timer1 compare interrupt A
    TIMSK1 |= (1 << OCIE1A);
 25e:	af e6       	ldi	r26, 0x6F	; 111
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	8c 91       	ld	r24, X
 264:	82 60       	ori	r24, 0x02	; 2
 266:	8c 93       	st	X, r24

    // Set prescaler to 64 and start Timer1
    TCCR1B |= (1 << CS11) | (1 << CS10);
 268:	80 81       	ld	r24, Z
 26a:	83 60       	ori	r24, 0x03	; 3
 26c:	80 83       	st	Z, r24

    // Enable global interrupts
    sei();
 26e:	78 94       	sei
 270:	08 95       	ret

00000272 <Timer2_Init>:
 * enables the Timer2 compare interrupt, sets the prescaler, and enables global interrupts.
 */
void Timer2_Init()
{
    // Set Timer2 to CTC (Clear Timer on Compare Match) mode
    TCCR2A |= (1 << WGM21);
 272:	e0 eb       	ldi	r30, 0xB0	; 176
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS21) | (1 << CS20); // Prescaler = 64
 27c:	e1 eb       	ldi	r30, 0xB1	; 177
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	83 60       	ori	r24, 0x03	; 3
 284:	80 83       	st	Z, r24

    // Set the compare match register to value for 1 ms interrupt at 1 MHz
    OCR2A = 31; // (2*(16*1)) -1 =31
 286:	8f e1       	ldi	r24, 0x1F	; 31
 288:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

    // Enable Timer2 compare interrupt A
    TIMSK2 |= (1 << OCIE2A);
 28c:	e0 e7       	ldi	r30, 0x70	; 112
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	82 60       	ori	r24, 0x02	; 2
 294:	80 83       	st	Z, r24

    // Set prescaler to 64 and start Timer2

    // Enable global interrupts
    sei();
 296:	78 94       	sei
 298:	08 95       	ret

0000029a <__vector_11>:
 * @brief Interrupt Service Routine (ISR) for Timer1 compare match A.
 * This function is called every time Timer1 reaches the compare match value.
 * It calls the watchdog driver ISR notification function.
 */
ISR(TIMER1_COMPA_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31


    WDGDrv_IsrNotification(); // Call the callback function every 50 ms
 2bc:	0e 94 af 01 	call	0x35e	; 0x35e <WDGDrv_IsrNotification>

    //GPIO_Write(LED_PIN_0, 0);
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_7>:
 * @brief Interrupt Service Routine (ISR) for Timer2 compare match A.
 * This function is called every time Timer2 reaches the compare match value.
 * It increments the milliseconds counter.
 */
ISR(TIMER2_COMPA_vect)
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
    g_milliseconds++; // Increment milliseconds counter
 2f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_milliseconds>
 2f8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_milliseconds+0x1>
 2fc:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <g_milliseconds+0x2>
 300:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <g_milliseconds+0x3>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	a1 1d       	adc	r26, r1
 308:	b1 1d       	adc	r27, r1
 30a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_milliseconds>
 30e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_milliseconds+0x1>
 312:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <g_milliseconds+0x2>
 316:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <g_milliseconds+0x3>
}
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <GetMillis>:
 */
uint32_t GetMillis()
{
    uint32_t ms;
    // Ensure atomic access to milliseconds variable
    cli(); // Disable interrupts
 32c:	f8 94       	cli
    ms = g_milliseconds;
 32e:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_milliseconds>
 332:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_milliseconds+0x1>
 336:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_milliseconds+0x2>
 33a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_milliseconds+0x3>
    sei(); // Enable interrupts
 33e:	78 94       	sei
    return ms;
}
 340:	08 95       	ret

00000342 <WDGDrv_Init>:
 342:	f8 94       	cli
 344:	a8 95       	wdr
 346:	84 b7       	in	r24, 0x34	; 52
 348:	87 7f       	andi	r24, 0xF7	; 247
 34a:	84 bf       	out	0x34, r24	; 52
 34c:	e0 e6       	ldi	r30, 0x60	; 96
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	88 61       	ori	r24, 0x18	; 24
 354:	80 83       	st	Z, r24
 356:	8a e4       	ldi	r24, 0x4A	; 74
 358:	80 83       	st	Z, r24
 35a:	78 94       	sei
 35c:	08 95       	ret

0000035e <WDGDrv_IsrNotification>:
 35e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_watchdogStatus>
 362:	81 11       	cpse	r24, r1
 364:	10 c0       	rjmp	.+32     	; 0x386 <WDGDrv_IsrNotification+0x28>
 366:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_mainFuncStuck>
 36a:	81 11       	cpse	r24, r1
 36c:	0c c0       	rjmp	.+24     	; 0x386 <WDGDrv_IsrNotification+0x28>
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Init_test>
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
 37c:	a8 95       	wdr
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
 386:	08 95       	ret

00000388 <WDGM_Init>:
 388:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_callCount>
 38c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_callCount+0x1>
 390:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_callCount+0x2>
 394:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <g_callCount+0x3>
 398:	0e 94 96 01 	call	0x32c	; 0x32c <GetMillis>
 39c:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <g_lastCheckTime>
 3a0:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <g_lastCheckTime+0x1>
 3a4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_lastCheckTime+0x2>
 3a8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_lastCheckTime+0x3>
 3ac:	08 95       	ret

000003ae <WDGM_MainFunction>:
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <g_mainFuncStuck>
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Init_test>
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
 3d4:	0e 94 96 01 	call	0x32c	; 0x32c <GetMillis>
 3d8:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <g_lastCheckTime>
 3dc:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <g_lastCheckTime+0x1>
 3e0:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <g_lastCheckTime+0x2>
 3e4:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <g_lastCheckTime+0x3>
 3e8:	6b 01       	movw	r12, r22
 3ea:	7c 01       	movw	r14, r24
 3ec:	c0 1a       	sub	r12, r16
 3ee:	d1 0a       	sbc	r13, r17
 3f0:	e2 0a       	sbc	r14, r18
 3f2:	f3 0a       	sbc	r15, r19
 3f4:	97 01       	movw	r18, r14
 3f6:	86 01       	movw	r16, r12
 3f8:	04 36       	cpi	r16, 0x64	; 100
 3fa:	11 05       	cpc	r17, r1
 3fc:	21 05       	cpc	r18, r1
 3fe:	31 05       	cpc	r19, r1
 400:	80 f1       	brcs	.+96     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 402:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <g_callCount>
 406:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <g_callCount+0x1>
 40a:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_callCount+0x2>
 40e:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_callCount+0x3>
 412:	09 30       	cpi	r16, 0x09	; 9
 414:	11 05       	cpc	r17, r1
 416:	21 05       	cpc	r18, r1
 418:	31 05       	cpc	r19, r1
 41a:	80 f0       	brcs	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41c:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <g_callCount>
 420:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <g_callCount+0x1>
 424:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_callCount+0x2>
 428:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_callCount+0x3>
 42c:	0c 30       	cpi	r16, 0x0C	; 12
 42e:	11 05       	cpc	r17, r1
 430:	21 05       	cpc	r18, r1
 432:	31 05       	cpc	r19, r1
 434:	18 f4       	brcc	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 436:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <g_watchdogStatus>
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <g_watchdogStatus>
 442:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <g_callCount>
 446:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <g_callCount+0x1>
 44a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_callCount+0x2>
 44e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <g_callCount+0x3>
 452:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <g_lastCheckTime>
 456:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <g_lastCheckTime+0x1>
 45a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_lastCheckTime+0x2>
 45e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <g_lastCheckTime+0x3>
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 55 00 	call	0xaa	; 0xaa <GPIO_Write>
 46e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <g_mainFuncStuck>
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	ff 90       	pop	r15
 478:	ef 90       	pop	r14
 47a:	df 90       	pop	r13
 47c:	cf 90       	pop	r12
 47e:	08 95       	ret

00000480 <WDGM_AlivenessIndication>:
 480:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <g_callCount>
 484:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <g_callCount+0x1>
 488:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <g_callCount+0x2>
 48c:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <g_callCount+0x3>
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	a1 1d       	adc	r26, r1
 494:	b1 1d       	adc	r27, r1
 496:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <g_callCount>
 49a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <g_callCount+0x1>
 49e:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <g_callCount+0x2>
 4a2:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <g_callCount+0x3>
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
